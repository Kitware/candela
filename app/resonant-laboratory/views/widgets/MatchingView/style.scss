@import '../../../stylesheets/colors.scss';

.MatchingView.content {
  overflow: auto;
}

.MatchingView.content #matchingNoDatasetState {
  position: absolute;
  top: 0em;
  left: 0em;
  margin: 1em;
  max-width: 20em;
}
.MatchingView.content #matchingNoVisualizationState {
  position: absolute;
  bottom: 0em;
  right: 0em;
  margin: 1em;
  max-width: 20em;
}

/* default node, edge styling */

.MatchingView.content .node {
  cursor: pointer;
}

.MatchingView.content .node rect.nodeBackground {
  fill: $matchingNodeBackgroundColor;
  stroke: $matchingNodeBackgroundColor;
  stroke-width: 5px;
  rx: 5px;
  ry: 5px;
}

.MatchingView.content .node text {
  font-size: 12pt;
  font-weight: bold;
  fill: $matchingNodeColor;
}

.MatchingView.content .node image {
  width: 1em;
  height: 1em;
  -webkit-filter: imgColorFilter($matchingNodeColor);
  filter: imgColorFilter($matchingNodeColor);
}
.MatchingView.content .node.data image {
  y: -0.5em;
}
.MatchingView.content .node.vis image {
  y: 0.25em;
}

.MatchingView.content .edge path {
  fill: none;
}
.MatchingView.content .edge path.ghostPath {
  stroke: transparent;
  stroke-width: 20px;
}

/* connectionStats (i.e. the the bubble) */

.MatchingView.content .node .connectionStats path.statsBackground {
  stroke-width: 5px;
}
.MatchingView.content .node .connectionStats text {
  font-size: 0.75em;
  letter-spacing: 1px;
}
.MatchingView.content .node .connectionStats.optional path.statsBackground {
  fill: $matchingOptionalColor;
  stroke: $matchingOptionalColor;
}
.MatchingView.content .node .connectionStats.optional text {
  fill: $matchingOptionalTextColor;
}
.MatchingView.content .node .connectionStats.satisfied path.statsBackground {
  fill: $matchingSuccessColor;
  stroke: $matchingSuccessColor;
}
.MatchingView.content .node .connectionStats.satisfied text {
  fill: $matchingSuccessTextColor;
}
.MatchingView.content .node .connectionStats.notSatisfied path.statsBackground {
  fill: $matchingWarningColor;
  stroke: $matchingWarningColor;
}
.MatchingView.content .node .connectionStats.notSatisfied text {
  fill: $matchingWarningTextColor;
}

/* interaction state: node is hovered (will change selection) */
.MatchingView.content .node.hovered rect.nodeBackground {
  fill: $matchingCreateLinkBackgroundColor;
  stroke: $matchingCreateLinkColor;
}
.MatchingView.content .node.hovered > text {
  fill: $matchingCreateLinkColor;
}
.MatchingView.content .node.hovered image {
  -webkit-filter: imgColorFilter($matchingCreateLinkColor);
  filter: imgColorFilter($matchingCreateLinkColor);
}

/* interaction state: node can't be connected */
.MatchingView.content .node.ineligible {
  cursor: not-allowed;
}
.MatchingView.content .node.ineligible rect.nodeBackground {
  fill: $disabledColor;
  stroke: none;
}
.MatchingView.content .node.ineligible > text {
  fill: $lightDisabledColor;
}
.MatchingView.content .node.ineligible image {
  -webkit-filter: imgColorFilter($lightDisabledColor);
  filter: imgColorFilter($lightDisabledColor);
}

/* interaction state: node can be connected */
.MatchingView.content .node.connectable rect.nodeBackground {
  fill: $matchingCreateLinkBackgroundColor;
  stroke: none;
}
.MatchingView.content .node.connectable > text {
  fill: $matchingCreateLinkColor;
}
.MatchingView.content .node.connectable image {
  -webkit-filter: imgColorFilter($matchingCreateLinkColor);
  filter: imgColorFilter($matchingCreateLinkColor);
}
.MatchingView.content .potential.edge path.visiblePath {
  stroke-dasharray: 5, 5;
  stroke-width: 5px;
  stroke: $matchingCreateLinkBackgroundColor;
}

/* interaction state: node is about to be connected */
.MatchingView.content .node.connectable.hovered rect.nodeBackground,
.MatchingView.content .potential.edge.hovered path.visiblePath {
  stroke: $matchingCreateLinkColor;
  stroke-width: 5px;
  stroke-dasharray: none;
}

/* interaction state: link exists, but is not involved
   in any current interaction */
.MatchingView.content .established.edge path.visiblePath {
  stroke-width: 3px;
  stroke: $matchingExistingLinkBackgroundColor;
}

/* interaction state: node is selected */
.MatchingView.content .node.selected rect.nodeBackground {
  fill: $matchingExistingLinkBackgroundColor;
}
.MatchingView.content .node.selected > text {
  fill: $matchingExistingLinkColor;
}
.MatchingView.content .node.selected image {
  -webkit-filter: imgColorFilter($matchingExistingLinkColor);
  filter: imgColorFilter($matchingExistingLinkColor);
}

/* interaction state: node is connected to the selected node */
.MatchingView.content .node.linked rect.nodeBackground {
  fill: $matchingExistingLinkBackgroundColor;
}
.MatchingView.content .node.linked > text {
  fill: $matchingExistingLinkColor;
}
.MatchingView.content .node.linked image {
  -webkit-filter: imgColorFilter($matchingExistingLinkColor);
  filter: imgColorFilter($matchingExistingLinkColor);
}

/* interaction state: link / borders of selected+connected nodes */
.MatchingView.content .node.selected rect.nodeBackground,
.MatchingView.content .node.linked rect.nodeBackground,
.MatchingView.content .established.selected.edge path.visiblePath {
  stroke-width: 5px;
  stroke: $matchingExistingLinkColor;
}

/* interaction state: connection is about to be broken */
.MatchingView.content .node.linked.hovered rect.nodeBackground,
.MatchingView.content .node.disconnectable rect.nodeBackground {
  fill: $matchingDeleteLinkBackgroundColor;
}
.MatchingView.content .node.linked.hovered > text,
.MatchingView.content .node.disconnectable > text {
  fill: $matchingDeleteLinkColor;
}
.MatchingView.content .node.linked.hovered image,
.MatchingView.content .node.disconnectable image {
  -webkit-filter: imgColorFilter($matchingDeleteLinkColor);
  filter: imgColorFilter($matchingDeleteLinkColor);
}
.MatchingView.content .node.linked.hovered rect.nodeBackground,
.MatchingView.content .node.disconnectable rect.nodeBackground,
.MatchingView.content .established.edge.hovered path.visiblePath {
  stroke: $matchingDeleteLinkColor;
}
.MatchingView.content .established.edge.hovered {
  /* TODO: create a less dorky cursor */
  /* cursor: url('../../../images/scissors.png') 12 12, auto; */
}
.MatchingView.content .established.edge.hovered path.visiblePath {
  stroke-dasharray: 5, 5;
  stroke-width: 5px;
}
