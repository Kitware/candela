/* CB dark:
#e41a1c
#377eb8
#4daf4a
#984ea3
#ff7f00
#ffff33
#a65628
#f781bf
*/

/* CB light:
#fbb4ae
#b3cde3
#ccebc5
#decbe4
#fed9a6
#ffffcc
#e5d8bd
#fddaec
*/

.MatchingView.content {
  overflow: auto;
}

/* default node, edge styling */

.MatchingView.content .node {
  cursor: pointer;
}

.MatchingView.content .node rect.nodeBackground {
  fill: #ddd;
  stroke: #ddd;
  stroke-width: 5px;
  rx: 5px;
  ry: 5px;
}

.MatchingView.content .node text {
  font-size: 12pt;
  font-weight: bold;
  fill: #333;
}

.MatchingView.content .node image {
  width: 1em;
  height: 1em;
}
.MatchingView.content .node.data image {
  y: -0.5em;
}
.MatchingView.content .node.vis image {
  y: 0.25em;
}

.MatchingView.content path.edge {
  fill: none;
}

/* connectionStats (i.e. the the bubble) */

.MatchingView.content .node .connectionStats circle {
  stroke-width: 5px;
}
.MatchingView.content .node .connectionStats text {
  font-size: 0.75em;
}
.MatchingView.content .node .connectionStats.optional circle {
  fill: #333;
  stroke: #333;
}
.MatchingView.content .node .connectionStats.optional text {
  fill: white;
}
.MatchingView.content .node .connectionStats.satisfied circle {
  fill: #4daf4a;
  stroke: #4daf4a;
}
.MatchingView.content .node .connectionStats.satisfied text {
  fill: #ccebc5;
}
.MatchingView.content .node .connectionStats.notSatisfied circle {
  fill: #ff7f00;
  stroke: #ff7f00;
}
.MatchingView.content .node .connectionStats.notSatisfied text {
  fill: #fed9a6;
}

/* interaction state: node is hovered (will change selection) */
.MatchingView.content .node.hovered rect.nodeBackground {
  stroke: #984ea3;
}

/* interaction state: node can't be connected */
.MatchingView.content .node.ineligible {
  cursor: not-allowed;
}
.MatchingView.content .node.ineligible rect.nodeBackground {
  fill: #ddd;
  stroke: none;
}
.MatchingView.content .node.ineligible > text {
  fill: #999;
}

/* interaction state: node can be connected */
.MatchingView.content .node.connectable rect.nodeBackground {
  fill: #b3cde3;
  stroke: none;
}
.MatchingView.content .node.connectable > text {
  fill: #377eb8;
}
.MatchingView.content .node.connectable image {
  -webkit-filter: url(#recolorImageTo377eb8);
  filter: url(#recolorImageTo377eb8);
}
.MatchingView.content path.potential.edge {
  stroke-dasharray: 5, 5;
  stroke-width: 5px;
  stroke: #b3cde3;
}

/* interaction state: node is about to be connected */
.MatchingView.content .node.connectable.hovered rect.nodeBackground,
.MatchingView.content path.potential.edge.hovered {
  stroke: #377eb8;
  stroke-width: 5px;
  stroke-dasharray: none;
}

/* interaction state: node is selected */
.MatchingView.content path.established.edge {
  stroke-width: 3px;
  stroke: #decbe4;
}
.MatchingView.content .node.selected rect.nodeBackground {
  fill: #984ea3;
}
.MatchingView.content .node.selected > text {
  fill: #333;
}
.MatchingView.content .node.selected image {
  -webkit-filter: url(#recolorImageTo333333);
  filter: url(#recolorImageTo333333);
}

/* interaction state: node is connected to the selected node */
.MatchingView.content .node.linked rect.nodeBackground {
  fill: #decbe4;
}
.MatchingView.content .node.linked > text {
  fill: #984ea3;
}
.MatchingView.content .node.linked image {
  -webkit-filter: url(#recolorImageTo984ea3);
  filter: url(#recolorImageTo984ea3);
}

/* interaction state: link / borders of selected+connected nodes */
.MatchingView.content .node.selected rect.nodeBackground,
.MatchingView.content .node.linked rect.nodeBackground,
.MatchingView.content path.established.selected.edge {
  stroke-width: 5px;
  stroke: #984ea3;
}

/* interaction state: connection is about to be broken */
.MatchingView.content .node.linked.hovered rect.nodeBackground,
.MatchingView.content .node.disconnectable rect.nodeBackground {
  fill: #fbb4ae;
}
.MatchingView.content .node.linked.hovered > text,
.MatchingView.content .node.disconnectable > text {
  fill: #e41a1c;
}
.MatchingView.content .node.linked.hovered image,
.MatchingView.content .node.disconnectable image {
  -webkit-filter: url(#recolorImageToe41a1c);
  filter: url(#recolorImageToe41a1c);
}
.MatchingView.content .node.linked.hovered rect.nodeBackground,
.MatchingView.content .node.disconnectable rect.nodeBackground,
.MatchingView.content path.established.edge.hovered {
  stroke: #e41a1c;
}
.MatchingView.content path.established.edge.hovered {
  stroke-width: 5px;
}
